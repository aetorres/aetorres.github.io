<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andres Site</title>
    <description>Andres blog.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 Jun 2018 16:25:09 -0600</pubDate>
    <lastBuildDate>Wed, 20 Jun 2018 16:25:09 -0600</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>How to delete Spot Instances using a Lambda function</title>
        <description>&lt;p&gt;I know, almost everybody knows how to delete instances using lambda functions, but, there are a little difference between a &lt;code class=&quot;highlighter-rouge&quot;&gt;regular EC2 instance&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;spot instaces&lt;/code&gt;.
In this case, let’s say that the &lt;code class=&quot;highlighter-rouge&quot;&gt;spot instances&lt;/code&gt; are slaves or workers for the &lt;code class=&quot;highlighter-rouge&quot;&gt;EC2 instances&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You would need to use some additional libraries if you want this script works, those libraries are not isntalled by default on AWS, thats why you would need to build this script locally ( on your PC) before push it to AWS.&lt;/p&gt;

&lt;p&gt;Those libraries are &lt;code class=&quot;highlighter-rouge&quot;&gt;pytz&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I just added a small script that will install those libraries and compress the whole code before push it to AWS.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; pytz
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; datetime
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; logging
zip &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; lamda.zip &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can se we look for all the spot instances that has been fulfilled ( created and running ), otherwise it will fail with cancelled instances or terminated instances;
also you can tell that we will terminate those &lt;code class=&quot;highlighter-rouge&quot;&gt;spot intances&lt;/code&gt; that have been working by more than 10h one by one.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import boto3
import logging
from datetime import datetime
from datetime import timedelta
from pytz import timezone
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)




def lambda_handler(event, context):
    client = boto3.client('ec2')
    instances = client.describe_spot_instance_requests(Filters=[{'Name': 'status-code','Values': ['fulfilled']}] )
    est = timezone('&amp;lt;AZ timezone&amp;gt;')
    print est.localize(datetime.now())
    instance=[]
    for r in instances['SpotInstanceRequests']:
        print r['InstanceId']
        print r['Status']['UpdateTime']
        if r[&quot;CreateTime&quot;] &amp;lt; est.localize(datetime.now() - timedelta(hours=10)):
            print &quot;Instance Terminated Due more than 10h from creation time&quot;
            instance.append(r['InstanceId'])
            client.terminate_instances( DryRun=False, InstanceIds=instance )
        else:
            print &quot;Instance OK&quot;
    return 1


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 20 Jun 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/aws/2018/06/20/lambda.html</link>
        <guid isPermaLink="true">http://localhost:4000/aws/2018/06/20/lambda.html</guid>
        
        <category>lambda</category>
        
        <category>AWS</category>
        
        <category>Python</category>
        
        
        <category>Aws</category>
        
      </item>
    
      <item>
        <title>How to preconfigure user on Jenkins</title>
        <description>&lt;p&gt;If you want to have preconfigurated your admin user at Jenkins and also your path to your maven and JDK you could use the next groovy script that will be placed at &lt;code class=&quot;highlighter-rouge&quot;&gt;init.groovy.d&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
import hudson.security.*
import jenkins.model.*

def instance = Jenkins.getInstance()

def desc = instance.getDescriptor(&quot;hudson.tasks.Maven&quot;)
def minst =  new hudson.tasks.Maven.MavenInstallation(&quot;maven353&quot;, &quot;/usr/local/maven&quot;);
desc.setInstallations(minst)
desc.save()


def dis = new hudson.model.JDK.DescriptorImpl();
dis.setInstallations( new hudson.model.JDK(&quot;jdk8&quot;, &quot;/usr/java/jdk1.8.0_171-amd64&quot;));
dis.save();

def hudsonRealm = new HudsonPrivateSecurityRealm(false)
hudsonRealm.createAccount('admin', 'admin')
instance.setSecurityRealm(hudsonRealm)

def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
instance.setAuthorizationStrategy(strategy)
instance.save()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also if you want to override the Wizard Plugins screen you should add this 2 files at your Jenkins root path with the Jenkins version you are using.&lt;/p&gt;

&lt;p&gt;Files&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jenkins.install.InstallUtil.lastExecVersion&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jenkins.install.UpgradeWizard.state&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Content example&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 2.122
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 20 May 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/jenkins/2018/05/20/jenkins2.html</link>
        <guid isPermaLink="true">http://localhost:4000/jenkins/2018/05/20/jenkins2.html</guid>
        
        <category>Jenkins</category>
        
        <category>admin</category>
        
        <category>Intallation</category>
        
        <category>groovy</category>
        
        
        <category>Jenkins</category>
        
      </item>
    
      <item>
        <title>How to preinstall plugins on Jenkins</title>
        <description>&lt;p&gt;If you ever wonder how to have your Jenkins server preconfigurated with your plugins before you even access to it by first time, let me show you how can you do it.&lt;/p&gt;

&lt;p&gt;First you’ll need to create a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;init.groovy.d&lt;/code&gt; at the Jenkins root path, this folder will run every script that you put inside it on every restart; then you’ll need to 
create a groovy file with your code. Ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins-add.groovy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The plugins list (&lt;code class=&quot;highlighter-rouge&quot;&gt;pluginParameter&lt;/code&gt;) will be separated by spaces or the delimiter you prefer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import jenkins.model.*
import java.util.logging.Logger
def logger = Logger.getLogger(&quot;&quot;)
def installed = false
def initialized = false
def pluginParameter=&quot; github maven-plugin job-dsl github-api.1.90 workflow-aggregator pipeline-utility-steps antisamy-markup-formatter ssh-agent startup-trigger-plugin pipeline-github dependency-check-jenkins-plugin&quot;
def plugins = pluginParameter.split()
logger.info(&quot;&quot; + plugins)
def instance = Jenkins.getInstance()
def pm = instance.getPluginManager()
def uc = instance.getUpdateCenter()
plugins.each {
  logger.info(&quot;Checking &quot; + it)
  if (!pm.getPlugin(it)) {
    logger.info(&quot;Looking UpdateCenter for &quot; + it)
    if (!initialized) {
      uc.updateAllSites()
      initialized = true
    }
    def plugin = uc.getPlugin(it)
    if (plugin) {
      logger.info(&quot;Installing &quot; + it)
    	def installFuture = plugin.deploy()
      while(!installFuture.isDone()) {
        logger.info(&quot;Waiting for plugin install: &quot; + it)
        sleep(3000)
      }
      installed = true
    }
  }
}
if (installed) {
  logger.info(&quot;Plugins installed, initializing a restart!&quot;)
  instance.save()
  instance.restart()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 20 May 2018 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/jenkins/2018/05/20/jenkins1.html</link>
        <guid isPermaLink="true">http://localhost:4000/jenkins/2018/05/20/jenkins1.html</guid>
        
        <category>Jenkins</category>
        
        <category>Plugins</category>
        
        <category>Intallation</category>
        
        <category>groovy</category>
        
        
        <category>Jenkins</category>
        
      </item>
    
  </channel>
</rss>
